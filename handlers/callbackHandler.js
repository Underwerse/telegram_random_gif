import path from 'path';
import { CONFIG } from '../config.js';
import { getVideoById } from '../utils/preview.js';
import { logActivity } from '../utils/logger.js';
import { escapeMarkdown, formatDuration, formatSize, getVideoDuration, getVideoSize } from '../utils/helpers.js';

export async function handleCallback(bot, query) {
  const chatId = query.message.chat.id;
  const data = query.data;
  const username = query.from.username || 'user';
  const name = query.from.first_name || 'anon';

  if (data.startsWith('play_')) {
    const videoId = data.replace('play_', '');
    const videoFile = getVideoById(videoId);

    if (videoFile) {
      try {
        const videoPath = path.join(CONFIG.PATHS.VIDEOS, videoFile);

        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let durationStr = '';
        try {
          const durationSec = await getVideoDuration(videoPath);
          durationStr = `‚è±Ô∏è: ${formatDuration(durationSec)}`;
        } catch (e) {
          console.warn(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${videoFile}`,
            e.message
          );
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä
        let sizeStr = '';
        try {
          const sizeBits = await getVideoSize(videoPath);
          sizeStr = `  üì¶: ${formatSize(sizeBits)}`;
        } catch (e) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä: ${videoFile}`, e.message);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –ø–µ—Ä–µ–¥ —Å–∞–º–∏–º –≤–∏–¥–µ–æ
        const infoMsg =
          `üé¨: \`${videoFile}\`\n` + `${durationStr}` + `${sizeStr}`;

        await bot.sendMessage(chatId, escapeMarkdown(infoMsg), { parse_mode: 'MarkdownV2' });

        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º answerCallbackQuery –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
        await bot.sendVideo(chatId, videoPath);

        // –õ–æ–≥–∏—Ä—É–µ–º
        logActivity(
          `${username}/${name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª \`show ${
            videoFile.split('.')[0]
          }\` ${new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
          })}`
        );
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', err);
        await bot.sendMessage(chatId, '‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.');
      }
    } else {
      await bot.sendMessage(chatId, '‚ö† –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª ID');
    }

    // –í–´–ó–´–í–ê–ï–ú –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    try {
      await bot.answerCallbackQuery({ callback_query_id: query.id });
    } catch (err) {
      // –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      console.warn(
        'answerCallbackQuery: query is too old ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º'
      );
    }
  }
}
