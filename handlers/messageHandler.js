import fs from 'fs';
import axios from 'axios';
import path from 'path';
import { CONFIG } from '../config.js';
import {
  sendVideoPreviews,
  sentPreviews,
  videoIdMap,
} from '../utils/preview.js';
import {
  escapeMarkdown,
  formatDuration,
  formatSize,
  generateThumbnail,
  getVideoDuration,
  getVideoSize,
  shuffleArray,
} from '../utils/helpers.js';
import { logActivity } from '../utils/logger.js';

export const authorized = {};
const logAuthorized = {};
const sentGifs = new Set();

const menu = {
  reply_markup: {
    keyboard: [
      [{ text: 'gif' }, { text: 'advice' }],
      [{ text: 'video' }, { text: 'preview' }],
    ],
    resize_keyboard: true,
  },
};

let isGifCooldown = false;
const onlineTracker = new Set();

export async function handleMessage(bot, msg) {
  const { chat, text, from } = msg;
  const chatId = chat.id;
  const username = from.username || 'user';
  const name = from.first_name || 'anon';

  if ((username === 'Nata135791' || from.id === 6215576417) && !onlineTracker.has(chatId)) {
    console.log(`User ${username} is online!`);
    onlineTracker.add(chatId);
    bot.sendMessage(205813238, `User ${username} is online!`);
    setTimeout(() => onlineTracker.delete(chatId), 10 * 60 * 1000);
  }

  if (!authorized[chatId]) {
    if ((text || '').trim().toLowerCase() === CONFIG.PASSWORD.toLowerCase()) {
      authorized[chatId] = true;
      return bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', menu);
    } else {
      return bot.sendMessage(chatId, 'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
  }

  if (msg.video) {
    return handleVideoUpload(bot, msg);
  }

  if (text?.toLowerCase().trim().startsWith('show ')) {
    const query = text.slice(5).toLowerCase().trim();
    return sendVideoPreviews(
      bot,
      { ...msg, text: query, show: true },
      (videoFile) => videoFile.toLowerCase().includes(query)
    );
  }

  if (text?.startsWith('/start play_')) {
    authorized[chatId] = true;
    const videoId = text.split('_')[1]; // –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å–ª–µ play_
    const videoFile = videoIdMap.get(videoId);

    if (!videoFile) {
      return bot.sendMessage(
        chatId,
        '‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.'
      );
    }

    const videoPath = path.join(CONFIG.PATHS.VIDEOS, videoFile);

    let durationStr = '';
    try {
      const durationSec = await getVideoDuration(videoPath);
      durationStr = `\n‚è±Ô∏è: ${formatDuration(durationSec)}`;
    } catch (e) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${videoFile}`, e.message);
    }

    let sizeStr = '';
    try {
      const sizeBits = await getVideoSize(videoPath);
      sizeStr = `  üì¶: ${formatSize(sizeBits)}`;
    } catch (e) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä: ${videoFile}`, e.message);
    }

    await bot.sendMessage(
      chatId,
      `üé¨: \`show ${escapeMarkdown(videoFile.split('.')[0])}\`${escapeMarkdown(
        durationStr
      )}${escapeMarkdown(sizeStr)}`,
      {
        parse_mode: 'MarkdownV2',
      }
    );

    await bot.sendVideo(chatId, videoPath);
    return;
  }

  switch (text.toLowerCase().trim()) {
    case 'logs':
      if (!logAuthorized[chatId]) {
        return bot.sendMessage(chatId, '–î–ª—è –ª–æ–≥–æ–≤ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å:');
      }
      return sendLogs(bot, chatId);

    case CONFIG.LOG_PASSWORD:
      logAuthorized[chatId] = true;
      return bot.sendMessage(chatId, '‚úÖ –õ–æ–≥–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã.', menu);

    case 'gif':
      if (isGifCooldown)
        return bot.sendMessage(chatId, '‚è≥ –ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥, –∫–æ–≤–±–æ–π.');
      isGifCooldown = true;
      setTimeout(() => (isGifCooldown = false), 5000);
      return sendGifs(bot, chatId, username, name);

    case 'video':
      await sendVideoPreviews(bot, msg, () => true, 1);

      return;
    case 'preview':
      await sendVideoPreviews(bot, msg, () => true, 5);

      return;

    case 'clear':
      try {
        sentGifs[chatId]?.clear();
        sentPreviews[chatId]?.clear();

        bot.sendMessage(
          msg.chat.id,
          'üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–∞–∫ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!'
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
      } finally {
        return;
      }
    case 'stats':
      const gifs = sentGifs[chatId]
        ? '- ' +
          Array.from(sentGifs[chatId])
            .map((gif) => gif.split('.')[0].trim())
            .join('\n- ')
        : '–ø—É—Å—Ç–æ';
      const previews = sentPreviews[chatId]
        ? Array.from(sentPreviews[chatId])
            .map((preview) => `\`show ${preview.split('.')[0].trim()}\``)
            .join('\n')
        : '–ø—É—Å—Ç–æ';

      const message =
        `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞*\n\n` +
        `*GIF, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:*\n${gifs}\n\n` +
        `*–ü—Ä–µ–≤—å—é, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã:*\n${previews}`;

      return bot.sendMessage(chatId, escapeMarkdown(message), {
        parse_mode: 'MarkdownV2',
      });

    case 'advice':
      try {
        const { data } = await axios.get(
          'https://fucking-great-advice.ru/api/random'
        );
        return bot.sendMessage(chatId, data.text);
      } catch (e) {
        return bot.sendMessage(chatId, 'üí© –°–æ–≤–µ—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.');
      }

    default:
      break;
  }
}

async function handleVideoUpload(bot, msg) {
  const { video, chat } = msg;
  const file = await bot.getFile(video.file_id);
  const fileUrl = `https://api.telegram.org/file/bot${CONFIG.TOKEN}/${file.file_path}`;
  const fileName = file.file_path.split('/').pop();
  const baseName = fileName.split('.')[0];
  const savePath = `${CONFIG.PATHS.VIDEOS}/${fileName}`;
  const thumbPath = `${CONFIG.PATHS.THUMBS}/${baseName}.jpg`;

  try {
    const { headers } = await axios.head(fileUrl);
    if (+headers['content-length'] > CONFIG.MAX_VIDEO_SIZE) {
      return bot.sendMessage(chat.id, `–§–∞–π–ª –±–æ–ª—å—à–æ–π, –±–µ—Ä–∏ —Å—Å—ã–ª–∫—É: ${fileUrl}`);
    }

    const res = await axios.get(fileUrl, { responseType: 'stream' });
    const writer = fs.createWriteStream(savePath);
    res.data.pipe(writer);

    writer.on('finish', () => {
      generateThumbnail(savePath, thumbPath)
        .then(() => {
          bot.sendMessage(chat.id, `üéâ –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫: \`show ${baseName}\``, {
            parse_mode: 'MarkdownV2',
          });
        })
        .catch((err) => {
          console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', err);
          bot.sendMessage(chat.id, `–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –ø—Ä–µ–≤—å—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.`);
        });
    });

    writer.on('error', (err) => {
      bot.sendMessage(chat.id, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${err.message}`);
    });
  } catch (err) {
    console.error(err);
    bot.sendMessage(chat.id, `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`);
  }
}

function sendLogs(bot, chatId) {
  try {
    if (!fs.existsSync(CONFIG.PATHS.LOGS))
      return bot.sendMessage(chatId, '–ü–æ–∫–∞ –ø—É—Å—Ç–æ.');
    const logs = fs
      .readFileSync(CONFIG.PATHS.LOGS, 'utf-8')
      .split('\n')
      .filter(Boolean)
      .slice(-10)
      .join('\n');
    const escapedLogs = escapeMarkdown(logs);
    bot.sendMessage(chatId, `*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n\n${escapedLogs}`, {
      parse_mode: 'MarkdownV2',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.');
  }
}

async function sendGifs(bot, chatId, username, name) {
  try {
    if (!sentGifs[chatId]) sentGifs[chatId] = new Set();

    const allFiles = fs.readdirSync(CONFIG.PATHS.GIFS);
    const gifs = allFiles.filter((file) => file.toLowerCase().endsWith('.gif'));

    if (!gifs.length) {
      return bot.sendMessage(
        chatId,
        'üìÇ –í –ø–∞–ø–∫–µ `gifs` –≤–æ–æ–±—â–µ –Ω–µ—Ç GIF-—Ñ–∞–π–ª–æ–≤.'
      );
    }

    const unseen = gifs.filter((gif) => !sentGifs[chatId].has(gif));

    if (unseen.length === 0) {
      sentGifs[chatId].clear();
      return bot.sendMessage(
        chatId,
        'üåÄ –í—Å—ë —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ. –û–±–Ω—É–ª–∏–ª, –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ.',
        menu
      );
    }

    const selected = shuffleArray(unseen).slice(0, 5);
    const delay = (ms) => new Promise((res) => setTimeout(res, ms));

    for (const gif of selected) {
      const fullPath = path.join(CONFIG.PATHS.GIFS, gif);

      try {
        await delay(2000);
        if (!fs.existsSync(fullPath)) {
          console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
          continue;
        }

        await bot.sendDocument(chatId, fullPath, {
          contentType: 'image/gif',
        });

        sentGifs[chatId].add(gif);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏ ${gif}:`, err.message);
        await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É: ${gif}`);
      }
    }

    logActivity(
      `üë§ ${username}/${name} –∑–∞–ø—Ä–æ—Å–∏–ª gif ${new Date().toLocaleString(
        'ru-RU',
        { timeZone: 'Europe/Moscow' }
      )}`
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–æ–∫:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–æ–∫.');
  }
}
