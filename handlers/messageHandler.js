import fs from 'fs';
import axios from 'axios';
import path from 'path';
import { CONFIG } from '../config.js';
import { sendVideoPreviews } from '../utils/preview.js';
import { shuffleArray } from '../utils/helpers.js';
import { logActivity } from '../utils/logger.js';

const authorized = {};
const logAuthorized = {};
const sentGifs = {};

const menu = {
  reply_markup: {
    keyboard: [
      [{ text: 'gif' }, { text: 'advice' }],
      [{ text: 'video' }, { text: 'preview' }],
    ],
    resize_keyboard: true,
  },
};

let isGifCooldown = false;

export async function handleMessage(bot, msg) {
  const { chat, text, from } = msg;
  const chatId = chat.id;
  const username = from.username || 'user';
  const name = from.first_name || 'anon';

  if (!authorized[chatId]) {
    if ((text || '').trim().toLowerCase() === CONFIG.PASSWORD.toLowerCase()) {
      authorized[chatId] = true;
      return bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', menu);
    } else {
      return bot.sendMessage(chatId, 'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
  }

  if (msg.video) {
    return handleVideoUpload(bot, msg);
  }

  if (text?.startsWith('show ')) {
    const query = text.slice(6).toLowerCase().trim();
    return sendVideoPreviews(bot, chatId, (name) =>
      name.toLowerCase().includes(query), 1
    );
  }

  switch (text) {
    case 'logs':
      if (!logAuthorized[chatId]) {
        return bot.sendMessage(chatId, '–î–ª—è –ª–æ–≥–æ–≤ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å:');
      }
      return sendLogs(bot, chatId);

    case CONFIG.LOG_PASSWORD:
      logAuthorized[chatId] = true;
      return bot.sendMessage(chatId, '‚úÖ –õ–æ–≥–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã.', menu);

    case 'gif':
      if (isGifCooldown) return bot.sendMessage(chatId, '‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.');
      isGifCooldown = true;
      setTimeout(() => (isGifCooldown = false), 5000);
      return sendGifs(bot, chatId, username, name);

    case 'video':
			await sendVideoPreviews(bot, msg, () => true, 1);
      
      return;
    case 'preview':
      await sendVideoPreviews(bot, msg, () => true, 5);
      
      return;

    case 'advice':
      try {
        const { data } = await axios.get(
          'https://fucking-great-advice.ru/api/random'
        );
        return bot.sendMessage(chatId, data.text);
      } catch (e) {
        return bot.sendMessage(chatId, 'üí© –°–æ–≤–µ—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.');
      }

    default:
      break;
  }
}

async function handleVideoUpload(bot, msg) {
  const { video, chat } = msg;
  const file = await bot.getFile(video.file_id);
  const fileUrl = `https://api.telegram.org/file/bot${CONFIG.TOKEN}/${file.file_path}`;
  const fileName = file.file_path.split('/').pop();
  const savePath = `${CONFIG.PATHS.VIDEOS}/${fileName}`;

  const { headers } = await axios.head(fileUrl);
  if (+headers['content-length'] > CONFIG.MAX_VIDEO_SIZE) {
    return bot.sendMessage(chat.id, `–§–∞–π–ª –±–æ–ª—å—à–æ–π, –±–µ—Ä–∏ —Å—Å—ã–ª–∫—É: ${fileUrl}`);
  }

  const res = await axios.get(fileUrl, { responseType: 'stream' });
  const writer = fs.createWriteStream(savePath);
  res.data.pipe(writer);

  writer.on('finish', () => {
    bot.sendMessage(
      chat.id,
      `üéâ –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫: \`video ${fileName.split('.')[0]}\``,
      { parse_mode: 'MarkdownV2' }
    );
  });

  writer.on('error', (err) => {
    bot.sendMessage(chat.id, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${err.message}`);
  });
}

function sendLogs(bot, chatId) {
  if (!fs.existsSync(CONFIG.PATHS.LOGS))
    return bot.sendMessage(chatId, '–ü–æ–∫–∞ –ø—É—Å—Ç–æ.');
  const logs = fs
    .readFileSync(CONFIG.PATHS.LOGS, 'utf-8')
    .split('\n')
    .filter(Boolean)
    .slice(-10)
    .join('\n');
  bot.sendMessage(chatId, `*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n\n${logs}`, {
    parse_mode: 'Markdown',
  });
}

async function sendGifs(bot, chatId, username, name) {
  if (!sentGifs[chatId]) sentGifs[chatId] = new Set();

  const allFiles = fs.readdirSync(CONFIG.PATHS.GIFS);
  const gifs = allFiles.filter((file) => file.toLowerCase().endsWith('.gif'));

  if (!gifs.length) {
    return bot.sendMessage(chatId, 'üìÇ –í –ø–∞–ø–∫–µ `gifs` –≤–æ–æ–±—â–µ –Ω–µ—Ç GIF-—Ñ–∞–π–ª–æ–≤.');
  }

  const unseen = gifs.filter((gif) => !sentGifs[chatId].has(gif));

  if (unseen.length === 0) {
    sentGifs[chatId].clear();
    return bot.sendMessage(
      chatId,
      'üåÄ –í—Å—ë —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ. –û–±–Ω—É–ª–∏–ª, –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ.',
      menu
    );
  }

  const selected = shuffleArray(unseen).slice(0, 5);
  const delay = (ms) => new Promise((res) => setTimeout(res, ms));

  for (const gif of selected) {
		const fullPath = path.join(CONFIG.PATHS.GIFS, gif);

    try {
      await delay(2000);
      if (!fs.existsSync(fullPath)) {
        console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
        continue;
      }

      await bot.sendDocument(chatId, fullPath, {
        contentType: 'image/gif',
      });

      sentGifs[chatId].add(gif);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏ ${gif}:`, err.message);
      await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É: ${gif}`);
    }
  }

  logActivity(`${username}/${name} –∑–∞–ø—Ä–æ—Å–∏–ª gif ${new Date().toISOString()}`);
}
